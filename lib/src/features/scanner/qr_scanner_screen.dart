import 'dart:async';
import 'dart:typed_data';

import 'package:flutter/material.dart';
import 'package:mobile_scanner/mobile_scanner.dart';
import 'package:test1/src/usb/usb_manager.dart';
import 'package:test1/src/usb/usb_service.dart';
import 'package:usb_serial/usb_serial.dart';


class QRScannerScreen extends StatelessWidget {
  QRScannerScreen({super.key});

  final UsbManager usbManager = UsbManager(UsbService());

  Future<String> _waitForArduinoResponse(UsbPort port,
      {Duration timeout = const Duration(seconds: 2),}) async {
    final completer = Completer<String>();
    String buffer = '';
    late StreamSubscription<Uint8List> sub;

    sub = port.inputStream!.listen((event) {
      buffer += String.fromCharCodes(event);
      if (buffer.contains('\n')) {
        completer.complete(buffer.trim());
        sub.cancel();
      }
    });

    return completer.future.timeout(timeout, onTimeout: () {
      sub.cancel();
      return '‚è± Arduino –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–≤';
    },
    );
  }


  Future<void> _sendToArduino(BuildContext context, String code) async {
    final port = await usbManager.selectDevice();
    if (!context.mounted) return;

    if (port == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('‚ùå Arduino –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ')),
      );
      return;
    }

    await usbManager.sendData('$code\n');
    if (!context.mounted) return;

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('‚úÖ QR –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ: $code')),
    );

    final response = await _waitForArduinoResponse(port);
    if (!context.mounted) return;

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('üì¨ Arduino –≤—ñ–¥–ø–æ–≤—ñ–≤: $response')),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('–°–∫–∞–Ω—É–≤–∞–Ω–Ω—è QR-–∫–æ–¥—É')),
      body: MobileScanner(
        onDetect: (capture) {
          final barcode = capture.barcodes.first;
          final code = barcode.rawValue;
          if (code != null) {
            _sendToArduino(context, code);
            Navigator.pop(context); // –ó–∞–∫—Ä–∏—Ç–∏ –ø—ñ—Å–ª—è —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è
          }
        },
      ),
    );
  }
}
